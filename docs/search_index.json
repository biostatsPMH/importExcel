[["index.html", "Using the Excel dataChecker macro and the importExcel package Overview", " Using the Excel dataChecker macro and the importExcel package Overview An excel macro has been developed that will be stored in your personal Excel workbook which will make the macro available to run on any data file you open. The importExcel package contains functions for processing Excel files that the macro has been run on Integration of the Excel macro and the importData package "],["workflow-development.html", "Workflow Development", " Workflow Development This is a work in progress! If you have comments/suggestions/bugfixes please raise an issue on gitHUB. To do this: Go to the issues page for the package Click New Issue: Please DO NOT send an email. Using gitHub allows everyone to see the issues and how they have been resolved. You will need to set up a gitHub account to raise an issue. "],["setup.html", "Setup", " Setup The first step is to install the package - this will load the importExcel package into R, and it will also save the Excel macros files onto your computer Installing the package You can install the latest version of importExcel from GitHub with: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;biostatsPMH/importExcel&quot;) This is a department-only package, it is not available on CRAN "],["installing-the-excel-macro.html", "Installing the Excel Macro", " Installing the Excel Macro The excel macro consists of two files that need to be stored in your personal.xlsb workbook: The dataChecker.bas file and the Dictionary.cls file. Once these two files are saved into your personal workbook the macro will be available on all the files you open in Excel. The macro stays on your machine in your workbook, it is not added to files that you check. "],["creating-your-personal-workbook.html", "Creating your Personal Workbook", " Creating your Personal Workbook Once your personal workbook is created you can store macros here that will be available to use on all the files you open. Ensure that you can see the Developer Tab in Excel - it will be in the menu at the top, if you see the Developer Tab jump to step 3 otherwise continue to step To show the Developer Tab On the File tab, go to Options &gt; Customize Ribbon. Under Customize the Ribbon and under Main Tabs, select the Developer check box. To Create your Personal Macro Workbook Click the Developer Tab Click Record Macro Change the Store macro in location to Personal Macro Workbook Click OK Do anything – highlight some cells, type some text, anything. This creates your personal macro workbook. Click Stop Recording "],["adding-the-macro-to-your-personal-workbook.html", "Adding the Macro to your Personal Workbook", " Adding the Macro to your Personal Workbook First - locate the VBA files The macro files are downloaded with the package. Copy and run the following code chunk in R to open the folder containing the files. macroFile &lt;- &quot;dataChecker.bas&quot; file_path &lt;- system.file(&quot;extdata&quot;, macroFile, package = &quot;importExcel&quot;) # Get the directory path containing the file folder_path &lt;- dirname(file_path) # Check if the folder exists if (dir.exists(folder_path)) { # Open the folder using the default system file explorer # For Windows if (Sys.info()[&#39;sysname&#39;] == &quot;Windows&quot;) { shell.exec(folder_path) } # For macOS else if (Sys.info()[&#39;sysname&#39;] == &quot;Darwin&quot;) { system(paste(&quot;open&quot;, shQuote(folder_path))) } # For Linux else if (Sys.info()[&#39;sysname&#39;] == &quot;Linux&quot;) { system(paste(&quot;xdg-open&quot;, shQuote(folder_path))) } # If the OS is not recognized else { message(&quot;Unable to open folder: Unrecognized operating system&quot;) } } else { message(&quot;Folder not found&quot;) } Now, in Excel Click Visual Basic from the Developer Tab (If you can’t see this, click the Developer Tab) Click on VBAproject(Personal.XLSB) Click File &gt; Import File Import the Dictionary.cls file Import the dataChecker.bas file Click Save to save the macros to Personal.XLSB "],["check-the-installation.html", "Check the Installation", " Check the Installation Click on the Developer Tab Click The Macros button The PERSONAL.XLSB!CheckData macro should appear in the list of macro names That’s it - you are all set to use the macro "],["workflow.html", "Workflow", " Workflow "],["using-the-checkdata-macro.html", "Using the CheckData Macro", " Using the CheckData Macro This macro will: highlight problems with the data on the data sheet create a data dictionary sheet at the end of the document that is used to import the data Please note Excel code is slow to run – this may take a 15-30 seconds for large files. To Run the Macro Open the data file in Excel Make sure the data sheet you want to check is the active sheet Click The Macros button (Click on the Developer Tab if you don’t see this) Select the PERSONAL.XLSB!CheckData macro and click Run To undo the formatting: Click on the Developer Tab Click Macros Run the PERSONAL.XLSB!RemoveFormatting macro to remove all formatting -or- Run the PERSONAL.XLSB!removeColumnFormatting to remove formatting for a single column "],["editing-the-dictionary-sheet.html", "Editing the Dictionary Sheet", " Editing the Dictionary Sheet Running the macro creates a dictionary sheet that summarises all the variables in the data. The columns highlighted in green can be edited to change the final data frame created by the importExcel package. For example: To omit a column set the value to FALSE in the Import columns. To recode variables set values in the Value_Label column. Note that if you set value labels for a column, any values without labels will be set to NA. To change the label that appears in the report edit the Label_For_Report column To change the variable name edit the Suggested_Name Caution: If you change the names of the column headers in the dictionary you will not be able to use the importExcel package to import and code the data. You can add additional columns for your own recode keeping, these will just be ignored on import. "],["the-importexcel-package.html", "The importExcel Package", " The importExcel Package The importExcel package has only one exported function: read_excel_with_dictionary This function performs the following tasks: reads in the data sheet reads in the dictionary sheet (these must be in the same Excel file) applies any variable recodings specified in the dictionary adds labels to the variables attempts to harmonise messy date columns The function returns an object with four elements: the recoded data a list of values omitted from numeric columns a list of converted dates (if multiple formats were present in columns) the dictionary used to convert the data (without excluded columns and ensuring non-duplicate variable names) "],["example-import.html", "Example Import", " Example Import You need to provide the function with the location (path and filename) of the Excel file, the name of the sheet containing the data and the name of the sheet containing the dictionary. library(importExcel) data_file &lt;- system.file(&quot;extdata&quot;, &quot;study_data.xlsx&quot;, package = &quot;importExcel&quot;) # This will read in the file, add variable labels and recode variables to # factors as specified in the dictionary sheet file_import &lt;- read_excel_with_dictionary(data_file = data_file, data_sheet = &quot;data&quot;,dictionary_sheet = &quot;dict&quot;) # extract the recoded-data coded_data &lt;- file_import$coded_data file_import contains the following objects: # check warnings file_import$warnings # check for text omitted from numeric data file_import$numeric_converstions # check for attempted date conversions file_import$date_converstions # Look at the dictionary used file_import$updated_dictionary Describe the coded data: require(tidyverse) require(reportRmd) coded_data |&gt; select(!studyID) |&gt; rm_compactsum(xvars=everything()) ## no statistical tests will be applied to date variables, date variables will be summarised with median Full Sample (n=100) Age at diagnosis 44.0 (32.0-57.2) sex - Male 45 (45%) BMI 29.0 (23.4-34.2) heart rate (bmp) 84.0 (72.0-92.0) date of diagnosis 2021-11-12 (2020-11-18 to 2023-06-18) date of randomisation 2023-06-25 (2023-04-18 to 2023-08-30) ECOG 1.0 (0.0-3.0) Treatment 47 (47%) baseline score 61.5 (27.5-76.2) final score 42.5 (18.5-81.5) hospital PMH 35 (35%) Western 33 (33%) Krembil 32 (32%) Diagnosis lupus 24 (24%) mumps 24 (24%) measles 31 (31%) rubella 21 (21%) "],["sec-sample-data.html", "Sample Data", " Sample Data The package installs two sample files: study_data.xlsx and study_data_messy.xlsx The following code can be copied and run to view the first file: tidy_data &lt;- &quot;study_data.xlsx&quot; messy_data &lt;- &quot;study_data_messy.xlsx&quot; file_path &lt;- system.file(&quot;extdata&quot;, tidy_data, package = &quot;importExcel&quot;) # Check if the file exists if (file.exists(file_path)) { # Open the file using the default system application (Excel) # For Windows if (Sys.info()[&#39;sysname&#39;] == &quot;Windows&quot;) { shell.exec(file_path) } # For macOS else if (Sys.info()[&#39;sysname&#39;] == &quot;Darwin&quot;) { system(paste(&quot;open&quot;, shQuote(file_path))) } # For Linux else if (Sys.info()[&#39;sysname&#39;] == &quot;Linux&quot;) { system(paste(&quot;xdg-open&quot;, shQuote(file_path))) } # If the OS is not recognized else { message(&quot;Unable to open file: Unrecognized operating system&quot;) } } else { message(&quot;File not found in the package&#39;s inst/extdata directory&quot;) } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
